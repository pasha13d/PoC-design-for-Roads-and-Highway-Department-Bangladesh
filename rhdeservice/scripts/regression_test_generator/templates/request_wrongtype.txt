#!/usr/bin/env python3

import sys
import unittest
import requests
import random
import string
from basetest import BaseTestCase

class ServiceTestCase(unittest.TestCase, BaseTestCase):

    _ATTR = '<attribute>'
    _ALLOWED_TYPE = type(<type>)
    _CODE_EXPECTED = '500'
    _CODE_EXPECTED_MSG = 'responseCode must be 500-* for this test scenario'
    _EMSG_EXPECTED = 'request_wrongtype'
    _EMSG_EXPECTED_MSG = 'responseMessage must include ' + _EMSG_EXPECTED + ' for this test scenario'
    _EMSG_EXPECTED_MSG1 = 'type of ' + _ATTR + ' must be : ' + str(_ALLOWED_TYPE)
    types = ([], {}, "str")

    def assign_wrong_type_to_attribute(self):
        while True:
            t = random.choice(self.types)
            if type(t) != self._ALLOWED_TYPE:
                self.request_data["body"][self._ATTR] = t
                return

    def test_service(self):
        self.assertEqual(requests.codes.ok, self.response.status_code)
        self.assertTrue(self._CODE_EXPECTED in self.response_data["header"]["responseCode"], self._CODE_EXPECTED_MSG)
        self.assertTrue(self._EMSG_EXPECTED in self.response_data["header"]["responseMessage"], self._EMSG_EXPECTED_MSG)
        self.assertTrue(self._ATTR in self.response_data["header"]["responseMessage"], self._EMSG_EXPECTED_MSG1)

    def setUp(self):
        super().prepare()
        self.assign_wrong_type_to_attribute()
        super().post()

    def tearDown(self):
        super().report(sys.argv[0])

if __name__ == '__main__':
    if len(sys.argv) == 4:
        (ServiceTestCase._TOKEN, ServiceTestCase._SERVICE, ServiceTestCase._URL) = (sys.argv.pop(), sys.argv.pop(), sys.argv.pop())
    else:
        print("Usage: " + sys.argv[0] + " URL SERVICE TOKEN")
        exit(1)

    unittest.main()
